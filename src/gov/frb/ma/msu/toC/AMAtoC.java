/* Generated By:JavaCC: Do not edit this line. AMAtoC.java */
package gov.frb.ma.msu.toC;
import gov.frb.ma.msu.modelEZCommon.*;
import java.io.*;

public class AMAtoC implements AMAtoCConstants {

    // declare constants

    public static final int No = 0;
    public static final int Yes = 1;

    public static final int Max_Array_Size = 10000;

    public static final int Left_Side = 100;
    public static final int Right_Side = 101;

    public static final int G_Matrix = 0;
    public static final int H_Matrix = 1;

    public static final int Endogenous = 0;
    public static final int Exogenous = 1;

    public static final int Data = 0;
    public static final int Notd = 1;
    public static final int Dtrm = 2;
////    public static final int Innov = 3;

    public static final int Stoch = 0;
    public static final int Imposed = 1;

    public static final int Wrong_Node_Type = 0;
    public static final int Invalid_Node_Type = 1;
    public static final int Cannot_Allocate_Memory = 2;

  static java.util.Stack argStack = new java.util.Stack();
  static ModelToC m;

private static boolean alreadyInitializedQ = false;
public static void initOnce(java.io.InputStream stream) {
if(!alreadyInitializedQ){AMAtoC parser = new AMAtoC(stream);
alreadyInitializedQ = true;}
}



  public static void main(String args[]) throws ParseException {

  AMAtoC parser = new AMAtoC(System.in);
  int status = 0;
  status = parser.runParser(args);

// code to test reentrance
//  String newargs[] = new String[1];  
//  newargs[0] = new String("antulio");
//  status = parser.runParser(newargs);

  System.exit(status);
}

  public static int notMain(String args[]) throws ParseException {

  AMAtoC parser = new AMAtoC(System.in);
  int status = 0;
  status = parser.runParser(args);

// code to test reentrance
//  String newargs[] = new String[1];  
//  newargs[0] = new String("antulio");
//  status = parser.runParser(newargs);

  return(status);
}




  public static int runParser(String args[]) throws ParseException {

    int ErrorCount;
    int i;
    String PathName;
    String FileName;
    int lastSlashIndex;
      if (args.length == 0) {
                System.err.println(
                  "AMAtoC Java Parser Version 1.03: Reading from file stickywage"
                            );
        try {
          PathName = "stickywage";
          lastSlashIndex = PathName.lastIndexOf('/');   // Real OS's
          if (lastSlashIndex < 0)
            lastSlashIndex = PathName.lastIndexOf('\u005c\u005c'); // Windows
          if (lastSlashIndex < 0)
            FileName = PathName;
          else
            FileName = PathName.substring(lastSlashIndex+1);
          m = new ModelToC(FileName);
//	  parser = new AMAtoC(new java.io.FileInputStream(PathName));
          ReInit(new java.io.FileInputStream(PathName));
        } catch (java.io.FileNotFoundException e) {
          System.err.println("AMAtoC Java Parser Version 1.03: File " + args[0] +
                             " not found.");
          System.err.print(e.getMessage());
          return(1);
        }
      } else


   if (args.length == 1) {

        System.err.println("AMAtoC Java Parser Version 1.03: Reading from file " +
                           args[0] + "...");
        try {
          PathName = args[0];
          PathName = "stickywage";
          lastSlashIndex = PathName.lastIndexOf('/');   // Real OS's
          if (lastSlashIndex < 0)
            lastSlashIndex = PathName.lastIndexOf('\u005c\u005c'); // Windows
          if (lastSlashIndex < 0)
            FileName = PathName;
          else
            FileName = PathName.substring(lastSlashIndex+1);
          m = new ModelToC(FileName);
//	  parser = new AMAtoC(new java.io.FileInputStream(PathName));
          ReInit(new java.io.FileInputStream(PathName));
        } catch (java.io.FileNotFoundException e) {
          System.err.println("AMAtoC Java Parser Version 1.03: File " + args[0] +
                             " not found.");
          System.err.print(e.getMessage());
          return(1);
        }
    }
    else {
      System.err.println("AMAtoC Java Parser 1.03 usage is:");
      System.err.println("         java AMAtoC inputfile");
      System.err.println("args length="+args.length);
      return(2);
    }

    try {
//      parser.model();
      model();
//      System.err.println("AMAtoC Java Parser Version 1.03: No syntactic errors found.");
    } catch (ParseException e) {
      System.err.println("AMAtoC Java Parser Version 1.03: Syntactic errors found.");
      System.err.print(e.getMessage());
      return(3);
    }

    // DEBUG
    // System.err.println("\n\nModel before expanding subtrees:");
    // m.Print();

    m.ExpandSubtrees();

    // DEBUG
    // System.err.println("\n\nModel after expanding subtrees:");
    // m.Print();

    ErrorCount = m.ErrorCheck();

//      System.err.println("No semantic errors found.");
    if (ErrorCount != 0)
 {
      System.err.print(ErrorCount + " semantic error");
      if (ErrorCount > 1)
        System.err.print("s");
      System.err.println(" found.");
      return(4);
    }

    // DEBUG
    // System.err.println("\n\nModel after building exogenous equations:");
    // m.Print();

    m.PrintFunctions();

    return(0);
  }

  static final public void model() throws ParseException {
    jj_consume_token(MODEL);
    jj_consume_token(PROMPT);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ENDOG);
    jj_consume_token(PROMPT);
    variablelist();
    eqnlist();
    jj_consume_token(END);
  }

  static final public void variablelist() throws ParseException {
    label_1:
    while (true) {
      variabledef();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
  }

  static final public void variabledef() throws ParseException {
  String name;
  Token x;
  int index;
    jj_consume_token(IDENTIFIER);
         name = token.image;
         Variable v = new Variable(name);
         m.AddVariable(v);
         index = m.FindVariableIndex(name);
         m.getVariables()[index].setDelay(0);
         m.getVariables()[index].setDataType(Data);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
          // set delay
           m.getVariables()[index].setDelay((int) Integer.parseInt(token.image));
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATA:
    case DTRM:
    case NOTD:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATA:
        x = jj_consume_token(DATA);
        break;
      case DTRM:
        x = jj_consume_token(DTRM);
        break;
      case NOTD:
        x = jj_consume_token(NOTD);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          // set vtype entry
        switch (x.kind) {
         case DATA:
            m.getVariables()[index].setDataType(Data);
            break;
         case NOTD:
            m.getVariables()[index].setDataType(Notd);
            break;
         case DTRM:
            m.getVariables()[index].setDataType(Dtrm);
            break;
            }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  static final public void eqnlist() throws ParseException {
  String name;
  Node n1;
  Node n2;
  Token x;
  int index;
  int eqtype;
    label_2:
    while (true) {
      jj_consume_token(EQUATION);
      jj_consume_token(PROMPT);
      jj_consume_token(IDENTIFIER);
          name = token.image;
          eqtype = Stoch;     // default

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQTYPE:
        jj_consume_token(EQTYPE);
        jj_consume_token(PROMPT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPOSED:
          x = jj_consume_token(IMPOSED);
          break;
        case STOCH:
          x = jj_consume_token(STOCH);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
            if (x.kind == IMPOSED)
              eqtype = Imposed;
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(EQ);
      jj_consume_token(PROMPT);
      expression();
      jj_consume_token(EQUALS);
      expression();
            m.AddEquation(new Equation(name, eqtype));
            index = m.getNEq();
            n1 = ((Node) argStack.pop());
            n2 = ((Node) argStack.pop());
            m.getEquations()[index-1].setLHS(n2);
            m.getEquations()[index-1].setRHS(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUATION:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
    }
  }

  static final public void expression() throws ParseException {
  Token x;
    term();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        x = jj_consume_token(PLUS);
        break;
      case MINUS:
        x = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      term();
            Node n1 = ((Node) argStack.pop());
            Node n2 = ((Node) argStack.pop());
            if ( x.kind == PLUS )
                argStack.push(new SumNode(n2, n1));
            else {
                ConstantNode cn1 = new ConstantNode(-1.0);
                ProductNodeToC pn1 = new ProductNodeToC(cn1, n1);
                argStack.push(new SumNode(n2, pn1));
                }
    }
  }

  static final public void term() throws ParseException {
  Token x;
    factor();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        x = jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        x = jj_consume_token(DIVIDE);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      factor();
            Node n1 = ((Node) argStack.pop());
            Node n2 = ((Node) argStack.pop());
            if ( x.kind == MULTIPLY )
               argStack.push(new ProductNodeToC(n2, n1));
            else
                {
                ConstantNode cn1 = new ConstantNode(-1.0);
                PowerNodeToC pown1 = new PowerNodeToC(n1, cn1);
                argStack.push(new ProductNodeToC(n2, pown1));
                }
    }
  }

  static final public void factor() throws ParseException {
    unary();
    label_5:
    while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(EXP);
      factor();
            Node n1 = ((Node) argStack.pop());
            Node n2 = ((Node) argStack.pop());
            argStack.push(new PowerNodeToC(n2, n1));
    }
  }

  static final public void unary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      element();
            Node n1 = ((Node) argStack.pop());
            ConstantNode cn1 = new ConstantNode(-1.0);
            argStack.push(new ProductNodeToC(cn1, n1));
      break;
    case LAG:
    case ELAG:
    case LEAD:
    case FLOAT:
    case INTEGER:
    case IDENTIFIER:
    case OPENPAREN:
      element();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void element() throws ParseException {
  Double d;
  String VarName;
  int Lead;
  int Lag;
  int ELag;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENPAREN:
      jj_consume_token(OPENPAREN);
      expression();
      jj_consume_token(CLOSEPAREN);
      break;
    case FLOAT:
    case INTEGER:
      constant();
      break;
    case LAG:
      jj_consume_token(LAG);
            Lag = 1;
      jj_consume_token(OPENPAREN);
      jj_consume_token(IDENTIFIER);
          VarName = token.image;
          if (m.FindVariableIndex(VarName) == -1) {
            System.err.println("First operand of LAG must be a variable.");
            {if (true) throw new ParseException();}
          }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        jj_consume_token(INTEGER);
           Lag = (int) Integer.parseInt(token.image);
           if (Lag <= 0) {
             System.err.println("LAG must be positive.");
             {if (true) throw new ParseException();}
           }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(CLOSEPAREN);
          /* variable with a lag */
        ELag = No;
        argStack.push(new VariableNodeToC(VarName, -1 * Lag, ELag));
        if (Lag > m.getNLag())
          m.setNLag(Lag);
      break;
    case ELAG:
      jj_consume_token(ELAG);
             Lag = 1;
      jj_consume_token(OPENPAREN);
      jj_consume_token(IDENTIFIER);
          VarName = token.image;
          if (m.FindVariableIndex(VarName) == -1) {
            System.err.println("First operand of ELAG must be a variable.");
            {if (true) throw new ParseException();}
          }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        jj_consume_token(INTEGER);
           Lag = (int) Integer.parseInt(token.image);
           if (Lag <= 0) {
             System.err.println("ELAG must be positive.");
             {if (true) throw new ParseException();}
           }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(CLOSEPAREN);
          /* variable with an elag */
        ELag = Yes;
        argStack.push(new VariableNodeToC(VarName, -1 * Lag, ELag));
        if (Lag > m.getNLag())
          m.setNLag(Lag);
      break;
    case LEAD:
      jj_consume_token(LEAD);
             Lead = 1;
      jj_consume_token(OPENPAREN);
      jj_consume_token(IDENTIFIER);
          VarName = token.image;
          if (m.FindVariableIndex(VarName) == -1) {
            System.err.println("First operand of LEAD must be a variable.");
            {if (true) throw new ParseException();}
          }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        jj_consume_token(INTEGER);
           Lead = (int) Integer.parseInt(token.image);
           if (Lead <= 0) {
             System.err.println("LEAD must be positive.");
             {if (true) throw new ParseException();}
            }
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(CLOSEPAREN);
          /* variable with a lead */
        ELag = No;
        argStack.push(new VariableNodeToC(VarName, Lead, ELag));
        if (Lead > m.getNLead())
          m.setNLead(Lead);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
          /* could be either a variable or a coefficient */
        if (m.FindVariableIndex(token.image) == -1) /* coefficient */
                {
                if (m.FindCoefficientIndex(token.image) < 0)
                   m.AddCoefficient(token.image);
                argStack.push(new CoefficientNode(token.image));
                }
        else /* variable with no lags or leads */
               {
               argStack.push(new VariableNodeToC(token.image, 0, No));
               }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void constant() throws ParseException {
  Token x;
  Double d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        d = Double.valueOf(token.image);
        try {
            argStack.push(new ConstantNode(d.doubleValue()));
            } catch (NumberFormatException ee) {
        argStack.push(new ConstantNode(Double.NaN));
        }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(EXP)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AMAtoCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x80000000,0x7000,0x7000,0x18000,0x100,0x40,0x3000000,0x3000000,0xc000000,0xc000000,0xa20e0000,0x0,0x0,0x0,0xa00e0000,0xa0000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x22,0x8,0x8,0x8,0x22,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AMAtoC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AMAtoC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AMAtoCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AMAtoC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AMAtoCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AMAtoC(AMAtoCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AMAtoCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
